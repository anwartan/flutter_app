// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:ditonton/domain/usecases/get_now_playing_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/get_popular_movies.dart' as _i6;
import 'package:ditonton/domain/usecases/get_top_rated_movies.dart' as _i4;
import 'package:ditonton/presentation/cubit/now_playing_movie/now_playing_movie_cubit.dart'
    as _i8;
import 'package:ditonton/presentation/cubit/now_playing_movie/now_playing_movie_state.dart'
    as _i3;
import 'package:ditonton/presentation/cubit/popular_movie/popular_movie_cubit.dart'
    as _i12;
import 'package:ditonton/presentation/cubit/popular_movie/popular_movie_state.dart'
    as _i7;
import 'package:ditonton/presentation/cubit/top_rated_movie/top_rated_movie_cubit.dart'
    as _i11;
import 'package:ditonton/presentation/cubit/top_rated_movie/top_rated_movie_state.dart'
    as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetNowPlayingMovies_0 extends _i1.Fake
    implements _i2.GetNowPlayingMovies {}

class _FakeNowPlayingMovieState_1 extends _i1.Fake
    implements _i3.NowPlayingMovieState {}

class _FakeGetTopRatedMovies_2 extends _i1.Fake
    implements _i4.GetTopRatedMovies {}

class _FakeTopRatedMovieState_3 extends _i1.Fake
    implements _i5.TopRatedMovieState {}

class _FakeGetPopularMovies_4 extends _i1.Fake implements _i6.GetPopularMovies {
}

class _FakePopularMovieState_5 extends _i1.Fake
    implements _i7.PopularMovieState {}

/// A class which mocks [NowPlayingMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingMovieCubit extends _i1.Mock
    implements _i8.NowPlayingMovieCubit {
  MockNowPlayingMovieCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
      Invocation.getter(#getNowPlayingMovies),
      returnValue: _FakeGetNowPlayingMovies_0()) as _i2.GetNowPlayingMovies);
  @override
  _i3.NowPlayingMovieState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeNowPlayingMovieState_1()) as _i3.NowPlayingMovieState);
  @override
  _i9.Stream<_i3.NowPlayingMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.NowPlayingMovieState>.empty())
          as _i9.Stream<_i3.NowPlayingMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Future<void> fetchNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchNowPlayingMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void emit(_i3.NowPlayingMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i3.NowPlayingMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [TopRatedMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedMovieCubit extends _i1.Mock
    implements _i11.TopRatedMovieCubit {
  MockTopRatedMovieCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_2()) as _i4.GetTopRatedMovies);
  @override
  _i5.TopRatedMovieState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTopRatedMovieState_3()) as _i5.TopRatedMovieState);
  @override
  _i9.Stream<_i5.TopRatedMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.TopRatedMovieState>.empty())
          as _i9.Stream<_i5.TopRatedMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Future<void> fetchTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchTopRatedMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void emit(_i5.TopRatedMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i5.TopRatedMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [PopularMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMovieCubit extends _i1.Mock implements _i12.PopularMovieCubit {
  MockPopularMovieCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_4()) as _i6.GetPopularMovies);
  @override
  _i7.PopularMovieState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakePopularMovieState_5()) as _i7.PopularMovieState);
  @override
  _i9.Stream<_i7.PopularMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.PopularMovieState>.empty())
          as _i9.Stream<_i7.PopularMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Future<void> fetchPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchPopularMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void emit(_i7.PopularMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i7.PopularMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}
