// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/pages/popular_tv_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:ditonton/domain/usecases/get_popular_on_tv.dart' as _i2;
import 'package:ditonton/presentation/cubit/popular_tv/popular_tv_cubit.dart'
    as _i4;
import 'package:ditonton/presentation/cubit/popular_tv/popular_tv_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetPopularOnTv_0 extends _i1.Fake implements _i2.GetPopularOnTv {}

class _FakePopularTvState_1 extends _i1.Fake implements _i3.PopularTvState {}

/// A class which mocks [PopularTvCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTvCubit extends _i1.Mock implements _i4.PopularTvCubit {
  MockPopularTvCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularOnTv get getPopularOnTv =>
      (super.noSuchMethod(Invocation.getter(#getPopularOnTv),
          returnValue: _FakeGetPopularOnTv_0()) as _i2.GetPopularOnTv);
  @override
  _i3.PopularTvState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePopularTvState_1()) as _i3.PopularTvState);
  @override
  _i5.Stream<_i3.PopularTvState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.PopularTvState>.empty())
          as _i5.Stream<_i3.PopularTvState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i5.Future<void> fetchPopularOnTv() =>
      (super.noSuchMethod(Invocation.method(#fetchPopularOnTv, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void emit(_i3.PopularTvState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i3.PopularTvState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
