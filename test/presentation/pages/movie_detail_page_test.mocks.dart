// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:ditonton/common/enum.dart' as _i18;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i16;
import 'package:ditonton/domain/entities/tv_detail.dart' as _i17;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart' as _i4;
import 'package:ditonton/domain/usecases/get_watchlist.dart' as _i6;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i8;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i9;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i7;
import 'package:ditonton/presentation/cubit/movie_detail/movie_detail_cubit.dart'
    as _i11;
import 'package:ditonton/presentation/cubit/movie_detail/movie_detail_state.dart'
    as _i3;
import 'package:ditonton/presentation/cubit/movie_recommendation/movie_recommendation_cubit.dart'
    as _i14;
import 'package:ditonton/presentation/cubit/movie_recommendation/movie_recommendation_state.dart'
    as _i5;
import 'package:ditonton/presentation/cubit/watch/watch_cubit.dart' as _i15;
import 'package:ditonton/presentation/cubit/watch/watch_state.dart' as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeMovieDetailState_1 extends _i1.Fake implements _i3.MovieDetailState {
}

class _FakeGetMovieRecommendations_2 extends _i1.Fake
    implements _i4.GetMovieRecommendations {}

class _FakeMovieRecommendationState_3 extends _i1.Fake
    implements _i5.MovieRecommendationState {}

class _FakeGetWatchlist_4 extends _i1.Fake implements _i6.GetWatchlist {}

class _FakeSaveWatchlist_5 extends _i1.Fake implements _i7.SaveWatchlist {}

class _FakeGetWatchListStatus_6 extends _i1.Fake
    implements _i8.GetWatchListStatus {}

class _FakeRemoveWatchlist_7 extends _i1.Fake implements _i9.RemoveWatchlist {}

class _FakeWatchState_8 extends _i1.Fake implements _i10.WatchState {}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i11.MovieDetailCubit {
  MockMovieDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_1()) as _i3.MovieDetailState);
  @override
  _i12.Stream<_i3.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieDetailState>.empty())
          as _i12.Stream<_i3.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchMovieDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchMovieDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void emit(_i3.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i13.Change<_i3.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}

/// A class which mocks [MovieRecommendationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecommendationCubit extends _i1.Mock
    implements _i14.MovieRecommendationCubit {
  MockMovieRecommendationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_2())
          as _i4.GetMovieRecommendations);
  @override
  _i5.MovieRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMovieRecommendationState_3())
          as _i5.MovieRecommendationState);
  @override
  _i12.Stream<_i5.MovieRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.MovieRecommendationState>.empty())
          as _i12.Stream<_i5.MovieRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchMovieRecommendations(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchMovieRecommendations, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void emit(_i5.MovieRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i13.Change<_i5.MovieRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}

/// A class which mocks [WatchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchCubit extends _i1.Mock implements _i15.WatchCubit {
  MockWatchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetWatchlist get getWatchlist =>
      (super.noSuchMethod(Invocation.getter(#getWatchlist),
          returnValue: _FakeGetWatchlist_4()) as _i6.GetWatchlist);
  @override
  _i7.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_5()) as _i7.SaveWatchlist);
  @override
  _i8.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
          returnValue: _FakeGetWatchListStatus_6()) as _i8.GetWatchListStatus);
  @override
  _i9.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_7()) as _i9.RemoveWatchlist);
  @override
  _i10.WatchState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeWatchState_8()) as _i10.WatchState);
  @override
  _i12.Stream<_i10.WatchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.WatchState>.empty())
          as _i12.Stream<_i10.WatchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchWatchlist() => (super.noSuchMethod(
      Invocation.method(#fetchWatchlist, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> addWatchlistMovie(_i16.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#addWatchlistMovie, [movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> addWatchlistTv(_i17.TvDetail? tvDetail) =>
      (super.noSuchMethod(Invocation.method(#addWatchlistTv, [tvDetail]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> removeWatchlistMovie(_i16.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistMovie, [movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> removeWatchlistTv(_i17.TvDetail? tvDetail) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTv, [tvDetail]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> isAddedToWatchlist(int? id, _i18.Type? type) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id, type]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  void emit(_i10.WatchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i13.Change<_i10.WatchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}
