// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i28;
import 'dart:typed_data' as _i29;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/enum.dart' as _i14;
import 'package:ditonton/common/failure.dart' as _i8;
import 'package:ditonton/data/datasources/db/database_helper.dart' as _i25;
import 'package:ditonton/data/datasources/movie_remote_data_source.dart'
    as _i18;
import 'package:ditonton/data/datasources/tv_remote_data_source.dart' as _i20;
import 'package:ditonton/data/datasources/watch_local_data_source.dart' as _i23;
import 'package:ditonton/data/models/episode_model.dart' as _i22;
import 'package:ditonton/data/models/movie_detail_model.dart' as _i3;
import 'package:ditonton/data/models/movie_model.dart' as _i19;
import 'package:ditonton/data/models/tv_detail_model.dart' as _i4;
import 'package:ditonton/data/models/tv_model.dart' as _i21;
import 'package:ditonton/data/models/watch_table.dart' as _i24;
import 'package:ditonton/domain/entities/episode.dart' as _i11;
import 'package:ditonton/domain/entities/movie.dart' as _i16;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i17;
import 'package:ditonton/domain/entities/tv.dart' as _i9;
import 'package:ditonton/domain/entities/tv_detail.dart' as _i10;
import 'package:ditonton/domain/entities/watch.dart' as _i13;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i15;
import 'package:ditonton/domain/repositories/tv_repository.dart' as _i6;
import 'package:ditonton/domain/repositories/watch_repository.dart' as _i12;
import 'package:flutter/src/widgets/navigator.dart' as _i27;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i26;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeMovieDetailResponse_1 extends _i1.Fake
    implements _i3.MovieDetailResponse {}

class _FakeTvDetailModel_2 extends _i1.Fake implements _i4.TvDetailModel {}

class _FakeResponse_3 extends _i1.Fake implements _i5.Response {}

class _FakeStreamedResponse_4 extends _i1.Fake implements _i5.StreamedResponse {
}

/// A class which mocks [TvRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRepository extends _i1.Mock implements _i6.TvRepository {
  MockTvRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>> getNowPlayingOnTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingOnTv, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i9.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>> getPopularOnTv() =>
      (super.noSuchMethod(Invocation.method(#getPopularOnTv, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i9.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>> searchOnTv(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchOnTv, [query]),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i9.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i10.TvDetail>> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue: Future<_i2.Either<_i8.Failure, _i10.TvDetail>>.value(
                  _FakeEither_0<_i8.Failure, _i10.TvDetail>()))
          as _i7.Future<_i2.Either<_i8.Failure, _i10.TvDetail>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>> getTvRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i9.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i11.Episode>>> getTvEpisodeBySeason(
          int? idTv, int? idSeason) =>
      (super.noSuchMethod(
              Invocation.method(#getTvEpisodeBySeason, [idTv, idSeason]),
              returnValue:
                  Future<_i2.Either<_i8.Failure, List<_i11.Episode>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i11.Episode>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i11.Episode>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>> getTopRatedOnTv() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedOnTv, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i9.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.Tv>>>);
}

/// A class which mocks [WatchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchRepository extends _i1.Mock implements _i12.WatchRepository {
  MockWatchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, String>> saveWatchlist(
          _i13.Watch? watch) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [watch]),
              returnValue: Future<_i2.Either<_i8.Failure, String>>.value(
                  _FakeEither_0<_i8.Failure, String>()))
          as _i7.Future<_i2.Either<_i8.Failure, String>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, String>> removeWatchlist(
          _i13.Watch? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i8.Failure, String>>.value(
                  _FakeEither_0<_i8.Failure, String>()))
          as _i7.Future<_i2.Either<_i8.Failure, String>>);
  @override
  _i7.Future<bool> isAddedToWatchlist(int? refId, _i14.Type? type) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [refId, type]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i13.Watch>>> getWatchlist() =>
      (super.noSuchMethod(Invocation.method(#getWatchlist, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i13.Watch>>>.value(
              _FakeEither_0<_i8.Failure, List<_i13.Watch>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i13.Watch>>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i15.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i16.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i16.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i16.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i17.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, _i17.MovieDetail>>.value(
              _FakeEither_0<_i8.Failure, _i17.MovieDetail>())) as _i7
          .Future<_i2.Either<_i8.Failure, _i17.MovieDetail>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i16.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i16.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i16.Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i18.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i19.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i19.MovieModel>>.value(<_i19.MovieModel>[]))
          as _i7.Future<List<_i19.MovieModel>>);
  @override
  _i7.Future<List<_i19.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i19.MovieModel>>.value(<_i19.MovieModel>[]))
      as _i7.Future<List<_i19.MovieModel>>);
  @override
  _i7.Future<List<_i19.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i19.MovieModel>>.value(<_i19.MovieModel>[]))
      as _i7.Future<List<_i19.MovieModel>>);
  @override
  _i7.Future<_i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse_1()))
          as _i7.Future<_i3.MovieDetailResponse>);
  @override
  _i7.Future<List<_i19.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i19.MovieModel>>.value(<_i19.MovieModel>[]))
          as _i7.Future<List<_i19.MovieModel>>);
  @override
  _i7.Future<List<_i19.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i19.MovieModel>>.value(<_i19.MovieModel>[]))
          as _i7.Future<List<_i19.MovieModel>>);
}

/// A class which mocks [TvRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRemoteDataSource extends _i1.Mock
    implements _i20.TvRemoteDataSource {
  MockTvRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i21.TvModel>> getNowPlayingOnTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingOnTv, []),
              returnValue: Future<List<_i21.TvModel>>.value(<_i21.TvModel>[]))
          as _i7.Future<List<_i21.TvModel>>);
  @override
  _i7.Future<List<_i21.TvModel>> getPopularOnTv() =>
      (super.noSuchMethod(Invocation.method(#getPopularOnTv, []),
              returnValue: Future<List<_i21.TvModel>>.value(<_i21.TvModel>[]))
          as _i7.Future<List<_i21.TvModel>>);
  @override
  _i7.Future<_i4.TvDetailModel> getTvDetail(int? id) => (super.noSuchMethod(
          Invocation.method(#getTvDetail, [id]),
          returnValue: Future<_i4.TvDetailModel>.value(_FakeTvDetailModel_2()))
      as _i7.Future<_i4.TvDetailModel>);
  @override
  _i7.Future<List<_i21.TvModel>> getTvRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<List<_i21.TvModel>>.value(<_i21.TvModel>[]))
          as _i7.Future<List<_i21.TvModel>>);
  @override
  _i7.Future<List<_i22.EpisodeModel>> getTvEpisodeBySeason(
          int? idTv, int? idSeason) =>
      (super.noSuchMethod(
              Invocation.method(#getTvEpisodeBySeason, [idTv, idSeason]),
              returnValue:
                  Future<List<_i22.EpisodeModel>>.value(<_i22.EpisodeModel>[]))
          as _i7.Future<List<_i22.EpisodeModel>>);
  @override
  _i7.Future<List<_i21.TvModel>> searchTv(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTv, [query]),
              returnValue: Future<List<_i21.TvModel>>.value(<_i21.TvModel>[]))
          as _i7.Future<List<_i21.TvModel>>);
  @override
  _i7.Future<List<_i21.TvModel>> getTvTopRated() =>
      (super.noSuchMethod(Invocation.method(#getTvTopRated, []),
              returnValue: Future<List<_i21.TvModel>>.value(<_i21.TvModel>[]))
          as _i7.Future<List<_i21.TvModel>>);
}

/// A class which mocks [WatchLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchLocalDataSource extends _i1.Mock
    implements _i23.WatchLocalDataSource {
  MockWatchLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> insertWatchlist(_i24.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [watch]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> removeWatchlist(_i24.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [watch]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i24.WatchTable?> getWatchByIdAndType(
          int? refId, _i14.Type? type) =>
      (super.noSuchMethod(
              Invocation.method(#getWatchByIdAndType, [refId, type]),
              returnValue: Future<_i24.WatchTable?>.value())
          as _i7.Future<_i24.WatchTable?>);
  @override
  _i7.Future<List<_i24.WatchTable>> getWatchlist() => (super.noSuchMethod(
          Invocation.method(#getWatchlist, []),
          returnValue: Future<List<_i24.WatchTable>>.value(<_i24.WatchTable>[]))
      as _i7.Future<List<_i24.WatchTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i25.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i26.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i26.Database?>.value())
          as _i7.Future<_i26.Database?>);
  @override
  _i7.Future<int> insertWatchlist(_i24.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [watch]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> removeWatchlist(_i24.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [watch]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<List<Map<String, dynamic>>> getWatchlist() => (super.noSuchMethod(
      Invocation.method(#getWatchlist, []),
      returnValue: Future<List<Map<String, dynamic>>>.value(
          <Map<String, dynamic>>[])) as _i7.Future<List<Map<String, dynamic>>>);
  @override
  _i7.Future<Map<String, dynamic>?> getWatchByRefIdAndType(
          int? refId, _i14.Type? type) =>
      (super.noSuchMethod(
              Invocation.method(#getWatchByRefIdAndType, [refId, type]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i7.Future<Map<String, dynamic>?>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i27.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
          _i27.Route<dynamic>? route, _i27.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i27.Route<dynamic>? route, _i27.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i27.Route<dynamic>? route, _i27.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i27.Route<dynamic>? newRoute, _i27.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i27.Route<dynamic>? route, _i27.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i28.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i29.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i29.Uint8List>.value(_i29.Uint8List(0)))
          as _i7.Future<_i29.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4()))
          as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
