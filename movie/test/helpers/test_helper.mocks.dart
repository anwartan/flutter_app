// Mocks generated by Mockito 5.2.0 from annotations
// in movie/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i22;
import 'dart:io' as _i4;
import 'dart:typed_data' as _i23;

import 'package:core/core.dart' as _i9;
import 'package:core/data/datasources/db/database_helper.dart' as _i18;
import 'package:core/data/datasources/movie_remote_data_source.dart' as _i14;
import 'package:core/data/datasources/watch_local_data_source.dart' as _i16;
import 'package:core/data/models/movie_detail_model.dart' as _i3;
import 'package:core/data/models/movie_model.dart' as _i15;
import 'package:core/data/models/watch_table.dart' as _i17;
import 'package:core/domain/entities/movie.dart' as _i12;
import 'package:core/domain/entities/movie_detail.dart' as _i13;
import 'package:core/domain/entities/watch.dart' as _i10;
import 'package:core/domain/repositories/movie_repository.dart' as _i11;
import 'package:core/domain/repositories/watch_repository.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/src/widgets/navigator.dart' as _i20;
import 'package:http/io_client.dart' as _i6;
import 'package:http/src/base_request.dart' as _i21;
import 'package:http/src/response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeMovieDetailResponse_1 extends _i1.Fake
    implements _i3.MovieDetailResponse {}

class _FakeSecurityContext_2 extends _i1.Fake implements _i4.SecurityContext {}

class _FakeResponse_3 extends _i1.Fake implements _i5.Response {}

class _FakeIOStreamedResponse_4 extends _i1.Fake
    implements _i6.IOStreamedResponse {}

/// A class which mocks [WatchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchRepository extends _i1.Mock implements _i7.WatchRepository {
  MockWatchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> saveWatchlist(
          _i10.Watch? watch) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [watch]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> removeWatchlist(
          _i10.Watch? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<bool> isAddedToWatchlist(int? refId, _i9.Type? type) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [refId, type]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Watch>>> getWatchlist() =>
      (super.noSuchMethod(Invocation.method(#getWatchlist, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Watch>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Watch>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Watch>>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i11.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i12.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i12.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i12.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, _i13.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, _i13.MovieDetail>>.value(
              _FakeEither_0<_i9.Failure, _i13.MovieDetail>())) as _i8
          .Future<_i2.Either<_i9.Failure, _i13.MovieDetail>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i12.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i12.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i12.Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i14.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i15.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i15.MovieModel>>.value(<_i15.MovieModel>[]))
          as _i8.Future<List<_i15.MovieModel>>);
  @override
  _i8.Future<List<_i15.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i15.MovieModel>>.value(<_i15.MovieModel>[]))
      as _i8.Future<List<_i15.MovieModel>>);
  @override
  _i8.Future<List<_i15.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i15.MovieModel>>.value(<_i15.MovieModel>[]))
      as _i8.Future<List<_i15.MovieModel>>);
  @override
  _i8.Future<_i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse_1()))
          as _i8.Future<_i3.MovieDetailResponse>);
  @override
  _i8.Future<List<_i15.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i15.MovieModel>>.value(<_i15.MovieModel>[]))
          as _i8.Future<List<_i15.MovieModel>>);
  @override
  _i8.Future<List<_i15.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i15.MovieModel>>.value(<_i15.MovieModel>[]))
          as _i8.Future<List<_i15.MovieModel>>);
}

/// A class which mocks [WatchLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchLocalDataSource extends _i1.Mock
    implements _i16.WatchLocalDataSource {
  MockWatchLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> insertWatchlist(_i17.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [watch]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> removeWatchlist(_i17.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [watch]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i17.WatchTable?> getWatchByIdAndType(
          int? refId, _i9.Type? type) =>
      (super.noSuchMethod(
              Invocation.method(#getWatchByIdAndType, [refId, type]),
              returnValue: Future<_i17.WatchTable?>.value())
          as _i8.Future<_i17.WatchTable?>);
  @override
  _i8.Future<List<_i17.WatchTable>> getWatchlist() => (super.noSuchMethod(
          Invocation.method(#getWatchlist, []),
          returnValue: Future<List<_i17.WatchTable>>.value(<_i17.WatchTable>[]))
      as _i8.Future<List<_i17.WatchTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i18.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i19.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i19.Database?>.value())
          as _i8.Future<_i19.Database?>);
  @override
  _i8.Future<int> insertWatchlist(_i17.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [watch]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeWatchlist(_i17.WatchTable? watch) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [watch]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlist() => (super.noSuchMethod(
      Invocation.method(#getWatchlist, []),
      returnValue: Future<List<Map<String, dynamic>>>.value(
          <Map<String, dynamic>>[])) as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<Map<String, dynamic>?> getWatchByRefIdAndType(
          int? refId, _i9.Type? type) =>
      (super.noSuchMethod(
              Invocation.method(#getWatchByRefIdAndType, [refId, type]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i20.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
          _i20.Route<dynamic>? route, _i20.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i20.Route<dynamic>? route, _i20.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i20.Route<dynamic>? route, _i20.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i20.Route<dynamic>? newRoute, _i20.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i20.Route<dynamic>? route, _i20.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CustomIOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i9.CustomIOClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.SecurityContext> get globalContext =>
      (super.noSuchMethod(Invocation.getter(#globalContext),
              returnValue:
                  Future<_i4.SecurityContext>.value(_FakeSecurityContext_2()))
          as _i8.Future<_i4.SecurityContext>);
  @override
  _i8.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<_i6.IOStreamedResponse> send(_i21.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i6.IOStreamedResponse>.value(
                  _FakeIOStreamedResponse_4()))
          as _i8.Future<_i6.IOStreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  _i8.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i8.Future<_i5.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i23.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i23.Uint8List>.value(_i23.Uint8List(0)))
          as _i8.Future<_i23.Uint8List>);
}
